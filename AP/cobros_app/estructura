mira estoy haciendo una app con dart, que logras analizar

//TODO AP/cobros_app/lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:sqflite/sqflite.dart'; // Importación de sqflite
import 'package:path_provider/path_provider.dart'; // Para getDatabasesPath
import 'dart:io'; // Para Directory
import 'firebase_options.dart';
import 'screens/login_screen.dart';
import 'screens/main_screen.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';

Future<void> main() async {
  // 0. Inicializar sqflite_common_ffi para desktop
  if (Platform.isWindows || Platform.isLinux || Platform.isMacOS) {
    sqfliteFfiInit();
    databaseFactory = databaseFactoryFfi;
  }
  // 1. Asegurar la inicialización de Flutter
  WidgetsFlutterBinding.ensureInitialized();

  // 2. Configuración inicial de la base de datos
  try {
    // Verificar/crear directorio de la base de datos
    final databasesPath = await getDatabasesPath();
    await Directory(databasesPath).create(recursive: true);
    print('Ruta de la base de datos: $databasesPath');
  } catch (e) {
    print('Error al configurar ruta de DB: $e');
  }

  // 3. Inicialización de Firebase
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print('Firebase inicializado correctamente');
  } catch (e) {
    print('Error al inicializar Firebase: $e');
    // Puedes decidir si quieres continuar sin Firebase o terminar la app
  }

  // 4. Ejecutar la aplicación
  runApp(const AuthWrapper());
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App de Cobros',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          // Estado de conexión
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Scaffold(
              body: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 20),
                    Text('Verificando autenticación...'),
                  ],
                ),
              ),
            );
          }

          // Errores
          if (snapshot.hasError) {
            return Scaffold(
              body: Center(
                child: Text(
                  'Error: ${snapshot.error.toString()}',
                  style: const TextStyle(color: Colors.red),
                ),
              ),
            );
          }

          // Usuario autenticado
          if (snapshot.hasData && snapshot.data != null) {
            return const MainScreen();
          }

          // No autenticado
          return const LoginScreen();
        },
      ),
    );
  }
}





//TODO AP/cobros_app/lib/firebase_options.dart

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyAa3wuZFVCcRplo5uutblEsFINw2J1KfIo',
    appId: '1:857007919036:web:4a7154c71311c83695a5b9',
    messagingSenderId: '857007919036',
    projectId: 'cliq-f3d88',
    authDomain: 'cliq-f3d88.firebaseapp.com',
    storageBucket: 'cliq-f3d88.firebasestorage.app',
    measurementId: 'G-PWQLS0120Y',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyALEhrQaUE6yMW_0EnA_Lbf4nwhdzt568E',
    appId: '1:857007919036:android:f35c04ac3fa8464d95a5b9',
    messagingSenderId: '857007919036',
    projectId: 'cliq-f3d88',
    storageBucket: 'cliq-f3d88.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCViCfFyIl2LOF29PdWNGxdaD_6SlgbPVM',
    appId: '1:857007919036:ios:49d8474e04e7fc5895a5b9',
    messagingSenderId: '857007919036',
    projectId: 'cliq-f3d88',
    storageBucket: 'cliq-f3d88.firebasestorage.app',
    iosBundleId: 'com.example.cobrosApp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCViCfFyIl2LOF29PdWNGxdaD_6SlgbPVM',
    appId: '1:857007919036:ios:49d8474e04e7fc5895a5b9',
    messagingSenderId: '857007919036',
    projectId: 'cliq-f3d88',
    storageBucket: 'cliq-f3d88.firebasestorage.app',
    iosBundleId: 'com.example.cobrosApp',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyAa3wuZFVCcRplo5uutblEsFINw2J1KfIo',
    appId: '1:857007919036:web:091a38f0a6ad404b95a5b9',
    messagingSenderId: '857007919036',
    projectId: 'cliq-f3d88',
    authDomain: 'cliq-f3d88.firebaseapp.com',
    storageBucket: 'cliq-f3d88.firebasestorage.app',
    measurementId: 'G-8446QJK1G3',
  );
}




//TODO Utils
    //TODO AP/cobros_app/lib/utils/responsive.dart

import 'package:flutter/material.dart';

class Responsive {
  // Método para saber si es móvil
  static bool isMobile(BuildContext context) =>
      MediaQuery.of(context).size.width < 600;

  // Método para saber si es tablet
  static bool isTablet(BuildContext context) =>
      MediaQuery.of(context).size.width >= 600 &&
      MediaQuery.of(context).size.width < 1100;

  // Método para saber si es escritorio
  static bool isDesktop(BuildContext context) =>
      MediaQuery.of(context).size.width >= 1100;

  // Método para obtener el ancho de pantalla
  static double screenWidth(BuildContext context) =>
      MediaQuery.of(context).size.width;

  // Método para obtener el alto de pantalla
  static double screenHeight(BuildContext context) =>
      MediaQuery.of(context).size.height;
}


//TODO services

    //TODO AP/cobros_app/lib/services/auth_service.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();

  User? get currentUser => _auth.currentUser;

  // Método de registro básico (público)
  Future<User?> registerUser({
    required String email,
    required String password,
    String? displayName,
  }) async {
    try {
      // 1. Registrar usuario en Firebase Auth
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // 2. Crear perfil del usuario en Firestore
      await _createUserProfile(
        user: userCredential.user!,
        displayName: displayName,
      );

      return userCredential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthError(e.code);
    }
  }

  // Método para registrar usuarios con roles (admin, owner, collector)
  Future<User?> registerUserWithRole({
    required String email,
    required String password,
    required String role,
    String? officeId, // Para cobradores y dueños
    String? officeName, // Solo para crear nueva oficina con dueño
    String? displayName,
  }) async {
    User? user; // Declaración movida aquí para que sea visible en el catch

    try {
      // Registrar el usuario
      user = await registerUser(
        email: email,
        password: password,
        displayName: displayName,
      );

      if (user == null) return null;

      // Si es dueño y se proporciona nombre de oficina, crear oficina
      String? newOfficeId;
      if (role == 'owner' && officeName != null) {
        final officeRef = await _firestore.collection('offices').add({
          'name': officeName,
          'createdAt': FieldValue.serverTimestamp(),
          'createdBy': _auth.currentUser?.uid,
        });
        newOfficeId = officeRef.id;
      }

      // Actualizar perfil con información de rol
      await _firestore.collection('users').doc(user.uid).update({
        'role': role,
        if (newOfficeId != null) 'officeId': newOfficeId,
        if (officeId != null) 'officeId': officeId,
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return user;
    } catch (e) {
      // Si falla, eliminar el usuario creado
      if (user != null) {
        await user.delete();
      }
      rethrow;
    }
  }

  // Método para que dueños registren cobradores
  Future<User?> registerCollector({
    required String email,
    required String password,
    required String officeId,
    String? displayName,
  }) async {
    // Verificar que el usuario actual es dueño de esta oficina
    final currentUserData = await getCurrentUserData();
    if (currentUserData?['role'] != 'owner' ||
        currentUserData?['officeId'] != officeId) {
      throw Exception(
        'No tienes permisos para registrar cobradores en esta oficina',
      );
    }

    // Registrar el cobrador
    return registerUserWithRole(
      email: email,
      password: password,
      role: 'collector',
      officeId: officeId,
      displayName: displayName,
    );
  }

  // Método privado para crear perfil inicial
  Future<void> _createUserProfile({
    required User user,
    String? displayName,
  }) async {
    await _firestore.collection('users').doc(user.uid).set({
      'email': user.email,
      'displayName': displayName ?? user.displayName,
      'photoUrl': user.photoURL,
      'role': 'user', // Rol por defecto
      'createdAt': FieldValue.serverTimestamp(),
      'isActive': true,
    });
  }

  // Obtener datos del usuario actual
  Future<Map<String, dynamic>?> getCurrentUserData() async {
    final user = _auth.currentUser;
    if (user == null) return null;
    final doc = await _firestore.collection('users').doc(user.uid).get();
    return doc.data();
  }

  // Método para iniciar sesión con email y contraseña (antes llamado "login")
  Future<User?> signInWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return userCredential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthError(e.code);
    }
  }

  // Método para iniciar sesión con Google
  Future<User?> signInWithGoogle() async {
    try {
      final googleUser = await _googleSignIn.signIn();
      if (googleUser == null) return null;

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);

      // Crear perfil si es nuevo usuario
      if (userCredential.additionalUserInfo?.isNewUser ?? false) {
        await _firestore.collection('users').doc(userCredential.user!.uid).set({
          'email': userCredential.user!.email,
          'displayName': userCredential.user!.displayName,
          'photoUrl': userCredential.user!.photoURL,
          'createdAt': FieldValue.serverTimestamp(),
          'isActive': true,
        });
      }

      return userCredential.user;
    } catch (e) {
      print('Error en Google Sign-In: $e');
      return null;
    }
  }

  // Método para cerrar sesión
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      await _googleSignIn.signOut();
    } catch (e) {
      print('Error al cerrar sesión: $e');
      throw Exception('No se pudo cerrar la sesión correctamente');
    }
  }

  // Manejo de errores
  Exception _handleAuthError(String code) {
    switch (code) {
      case 'user-not-found':
      case 'wrong-password':
        return Exception('Correo o contraseña incorrectos');
      case 'user-disabled':
        return Exception('La cuenta ha sido deshabilitada');
      case 'too-many-requests':
        return Exception('Demasiados intentos. Intenta más tarde');
      case 'invalid-email':
        return Exception('El correo electrónico no es válido');
      default:
        return Exception('Error al iniciar sesión: $code');
    }
  }
}


     //TODO AP/cobros_app/lib/services/user_service.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Obtener todos los usuarios registrados en Firestore
  Future<List<Map<String, dynamic>>> getAllUsers() async {
    try {
      final usersSnapshot = await _firestore.collection('users').get();
      final adminsSnapshot = await _firestore.collection('admins').get();

      final adminUids = adminsSnapshot.docs.map((doc) => doc.id).toSet();

      return usersSnapshot.docs.map((doc) {
        return {
          'uid': doc.id,
          ...doc.data(),
          'isAdmin': adminUids.contains(doc.id),
        };
      }).toList();
    } catch (e) {
      print('Error al obtener usuarios: $e');
      throw Exception('Error cargando usuarios');
    }
  }

  // Verificar si el usuario actual es admin
  Future<bool> isCurrentUserAdmin() async {
    final user = _auth.currentUser;
    if (user == null) return false;

    final adminDoc = await _firestore.collection('admins').doc(user.uid).get();
    return adminDoc.exists;
  }

  // Convertir usuario en admin
  Future<void> promoteToAdmin(String uid, String email) async {
    await _firestore.collection('admins').doc(uid).set({
      'email': email,
      'promotedAt': FieldValue.serverTimestamp(),
      'promotedBy': _auth.currentUser?.uid,
    });
  }

  // Remover permisos de admin
  Future<void> demoteAdmin(String uid) async {
    await _firestore.collection('admins').doc(uid).delete();
  }

  // Obtener datos del usuario actual con información de Auth + Firestore
  Future<Map<String, dynamic>?> getCurrentUserData() async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      final isAdmin = await isCurrentUserAdmin();

      return {
        'uid': user.uid,
        'email': user.email,
        'displayName': user.displayName,
        'photoUrl': user.photoURL,
        'isAdmin': isAdmin,
        ...?userDoc.data(),
      };
    } catch (e) {
      print('Error obteniendo datos usuario: $e');
      return null;
    }
  }
}




//TODO data:
    //TODO AP/cobros_app/lib/data/database_helper.dart

import 'package:sqflite/sqflite.dart' as sql;
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import '../models/cobro_model.dart';
import '../models/cliente_models.dart';
import 'package:flutter/widgets.dart'; // Añade este import

class DatabaseHelper {
  // Nombres de tablas
  static const String tableCobros = 'cobros';
  static const String tableClientes = 'clientes';

  // Columnas para tabla cobros
  static const String columnId = 'id';
  static const String columnClienteId = 'clienteId';
  static const String columnCliente = 'cliente';
  static const String columnMonto = 'monto';
  static const String columnFecha = 'fecha';
  static const String columnUbicacion = 'ubicacion';
  static const String columnEstado = 'estado';

  // Columnas para tabla clientes
  static const String columnClienteNombre = 'nombre';
  static const String columnClienteTelefono = 'telefono';
  static const String columnClienteEmail = 'email';
  static const String columnClienteDireccion = 'direccion';
  static const String columnClienteFechaRegistro = 'fechaRegistro';

  static const _databaseName = 'cobros.db';
  static const _databaseVersion = 3;

  // Singleton
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static sql.Database? _database;

  Future<sql.Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<sql.Database> _initDatabase() async {
    // Asegurar que los widgets de Flutter estén inicializados
    WidgetsFlutterBinding.ensureInitialized();

    final documentsDirectory = await getApplicationDocumentsDirectory();
    final path = join(documentsDirectory.path, _databaseName);

    try {
      await Directory(dirname(path)).create(recursive: true);
    } catch (e) {
      print('Error al crear directorio: $e');
    }

    return await sql.openDatabase(
      path,
      version: _databaseVersion,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
      onConfigure: (db) async {
        await db.execute('PRAGMA foreign_keys = ON');
      },
    );
  }

  Future _onCreate(sql.Database db, int version) async {
    await db.execute('''
      CREATE TABLE $tableClientes (
        $columnId INTEGER PRIMARY KEY AUTOINCREMENT,
        $columnClienteNombre TEXT NOT NULL,
        $columnClienteTelefono TEXT,
        $columnClienteEmail TEXT,
        $columnClienteDireccion TEXT,
        $columnClienteFechaRegistro TEXT NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE $tableCobros (
        $columnId INTEGER PRIMARY KEY AUTOINCREMENT,
        $columnClienteId INTEGER NOT NULL,
        $columnCliente TEXT NOT NULL,
        $columnMonto REAL NOT NULL,
        $columnFecha TEXT NOT NULL,
        $columnUbicacion TEXT NOT NULL,
        $columnEstado TEXT DEFAULT 'pendiente',
        FOREIGN KEY ($columnClienteId) REFERENCES $tableClientes ($columnId)
      )
    ''');
  }

  Future _onUpgrade(sql.Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 2) {
      await db.execute(
        'ALTER TABLE $tableCobros ADD COLUMN $columnEstado TEXT DEFAULT "pendiente"',
      );
    }

    if (oldVersion < 3) {
      try {
        await db.execute('''
          CREATE TABLE IF NOT EXISTS $tableClientes (
            $columnId INTEGER PRIMARY KEY AUTOINCREMENT,
            $columnClienteNombre TEXT NOT NULL,
            $columnClienteTelefono TEXT,
            $columnClienteEmail TEXT,
            $columnClienteDireccion TEXT,
            $columnClienteFechaRegistro TEXT NOT NULL
          )
        ''');

        await db.insert(tableClientes, {
          columnClienteNombre: 'Cliente General',
          columnClienteFechaRegistro: DateTime.now().toIso8601String(),
        });

        await db.execute('''
          CREATE TABLE ${tableCobros}_temp (
            $columnId INTEGER PRIMARY KEY AUTOINCREMENT,
            $columnClienteId INTEGER NOT NULL DEFAULT 1,
            $columnCliente TEXT NOT NULL,
            $columnMonto REAL NOT NULL,
            $columnFecha TEXT NOT NULL,
            $columnUbicacion TEXT NOT NULL,
            $columnEstado TEXT DEFAULT 'pendiente',
            FOREIGN KEY ($columnClienteId) REFERENCES $tableClientes ($columnId)
          )
        ''');

        await db.execute('''
          INSERT INTO ${tableCobros}_temp 
          ($columnId, $columnClienteId, $columnCliente, $columnMonto, $columnFecha, $columnUbicacion, $columnEstado)
          SELECT $columnId, 1, $columnCliente, $columnMonto, $columnFecha, $columnUbicacion, 
          COALESCE($columnEstado, 'pendiente') FROM $tableCobros
        ''');

        await db.execute('DROP TABLE $tableCobros');
        await db.execute(
          'ALTER TABLE ${tableCobros}_temp RENAME TO $tableCobros',
        );
      } catch (e) {
        print('Error durante migración a v3: $e');
        rethrow;
      }
    }
  }

  // Métodos para clientes
  Future<int> insertCliente(Cliente cliente) async {
    final db = await database;
    return await db.insert(
      tableClientes,
      cliente.toMap(),
      conflictAlgorithm: sql.ConflictAlgorithm.replace,
    );
  }

  Future<List<Cliente>> getClientes() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(tableClientes);
    return List.generate(maps.length, (i) => Cliente.fromMap(maps[i]));
  }

  // Métodos para cobros
  Future<int> insertCobro(Cobro cobro) async {
    final db = await database;
    return await db.insert(tableCobros, {
      columnClienteId: cobro.clienteId,
      columnCliente: cobro.clienteNombre,
      columnMonto: cobro.monto,
      columnFecha: cobro.fecha.toIso8601String(),
      columnUbicacion: cobro.ubicacion,
      columnEstado: cobro.estado ?? 'pendiente',
    });
  }

  Future<List<Cobro>> getCobros() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      tableCobros,
      orderBy: '$columnFecha DESC',
    );

    return List.generate(maps.length, (i) {
      return Cobro(
        id: maps[i][columnId],
        clienteId: maps[i][columnClienteId],
        clienteNombre: maps[i][columnCliente] ?? 'Sin nombre',
        monto: (maps[i][columnMonto] as num).toDouble(),
        fecha: DateTime.parse(maps[i][columnFecha]),
        ubicacion: maps[i][columnUbicacion] ?? 'Sin ubicación',
        estado: maps[i][columnEstado] ?? 'pendiente',
      );
    });
  }

  Future<int> updateCobro(Cobro cobro) async {
    final db = await database;
    return await db.update(
      tableCobros,
      {
        columnClienteId: cobro.clienteId,
        columnCliente: cobro.clienteNombre,
        columnMonto: cobro.monto,
        columnFecha: cobro.fecha.toIso8601String(),
        columnUbicacion: cobro.ubicacion,
        columnEstado: cobro.estado,
      },
      where: '$columnId = ?',
      whereArgs: [cobro.id],
    );
  }

  Future<int> deleteCobro(int id) async {
    final db = await database;
    return await db.delete(
      tableCobros,
      where: '$columnId = ?',
      whereArgs: [id],
    );
  }

  Future<void> close() async {
    if (_database != null) {
      await _database!.close();
      _database = null;
    }
  }
}



//TODO screens:

       //TODO admin
           //TODO AP/cobros_app/lib/screens/admin/admin_home_screen.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../services/auth_service.dart';
import '../../services/user_service.dart';
import 'users_screen.dart';
import 'offices_screen.dart';

class AdminHomeScreen extends StatefulWidget {
  const AdminHomeScreen({super.key});

  @override
  State<AdminHomeScreen> createState() => _AdminHomeScreenState();
}

class _AdminHomeScreenState extends State<AdminHomeScreen> {
  final UserService _userService = UserService();
  int _userCount = 0;
  int _officeCount = 0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadCounts();
  }

  Future<void> _loadCounts() async {
    final users = await _userService.getAllUsers();
    final offices =
        await FirebaseFirestore.instance.collection('offices').get();

    setState(() {
      _userCount = users.length;
      _officeCount = offices.size;
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Panel de Administración',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 20),
                    Row(
                      children: [
                        _buildStatCard(
                          'Usuarios',
                          _userCount,
                          Icons.people,
                          Colors.blue,
                          () => Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (_) => const UsersScreen(),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        _buildStatCard(
                          'Oficinas',
                          _officeCount,
                          Icons.business,
                          Colors.green,
                          () => Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (_) => const OfficesScreen(),
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 30),
                    const Text(
                      'Acciones Rápidas:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: [
                        ActionChip(
                          avatar: const Icon(Icons.add, size: 18),
                          label: const Text('Nuevo Admin'),
                          onPressed: () => _showAddUserDialog('admin'),
                        ),
                        ActionChip(
                          avatar: const Icon(Icons.add_business, size: 18),
                          label: const Text('Nueva Oficina'),
                          onPressed:
                              () => Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => const OfficesScreen(),
                                ),
                              ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
    );
  }

  Widget _buildStatCard(
    String title,
    int count,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return Expanded(
      child: Card(
        elevation: 4,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(8),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(icon, color: color),
                    const SizedBox(width: 8),
                    Text(title, style: const TextStyle(fontSize: 16)),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  count.toString(),
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showAddUserDialog(String role) {
    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Text(
              'Registrar nuevo ${role == 'admin' ? 'Administrador' : 'Dueño'}',
            ),
            content: AddUserForm(role: role),
          ),
    );
  }
}

class AddUserForm extends StatefulWidget {
  final String role;

  const AddUserForm({super.key, required this.role});

  @override
  State<AddUserForm> createState() => _AddUserFormState();
}

class _AddUserFormState extends State<AddUserForm> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(labelText: 'Email'),
            validator:
                (value) => value!.contains('@') ? null : 'Email inválido',
          ),
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(labelText: 'Contraseña'),
            obscureText: true,
            validator:
                (value) => value!.length >= 6 ? null : 'Mínimo 6 caracteres',
          ),
          if (widget.role == 'owner')
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Nombre de la Oficina',
              ),
              validator: (value) => value!.isEmpty ? 'Requerido' : null,
            ),
          const SizedBox(height: 20),
          _isLoading
              ? const CircularProgressIndicator()
              : ElevatedButton(
                onPressed: _registerUser,
                child: const Text('Registrar'),
              ),
        ],
      ),
    );
  }

  Future<void> _registerUser() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);
    try {
      final authService = AuthService();
      final user = await authService.registerUserWithRole(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
        role: widget.role,
        officeName: widget.role == 'owner' ? _nameController.text.trim() : null,
      );

      if (user != null && mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Usuario registrado exitosamente')),
        );
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }
}

           //TODO AP/cobros_app/lib/screens/admin/offices_screen.dart

           import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class OfficesScreen extends StatefulWidget {
  const OfficesScreen({super.key});

  @override
  State<OfficesScreen> createState() => _OfficesScreenState();
}

class _OfficesScreenState extends State<OfficesScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _addressController = TextEditingController();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Gestión de Oficinas'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddOfficeDialog(),
          ),
        ],
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: _firestore.collection('offices').snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text('No hay oficinas registradas'));
          }

          return ListView.builder(
            padding: const EdgeInsets.all(8),
            itemCount: snapshot.data!.docs.length,
            itemBuilder: (context, index) {
              final office = snapshot.data!.docs[index];
              return Card(
                child: ListTile(
                  title: Text(office['name']),
                  subtitle: Text(office['address']),
                  trailing: IconButton(
                    icon: const Icon(Icons.edit),
                    onPressed: () => _showEditOfficeDialog(office),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  void _showAddOfficeDialog() {
    _nameController.clear();
    _addressController.clear();

    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Agregar Nueva Oficina'),
            content: _buildOfficeForm(),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: _saveOffice,
                child: const Text('Guardar'),
              ),
            ],
          ),
    );
  }

  void _showEditOfficeDialog(DocumentSnapshot office) {
    _nameController.text = office['name'];
    _addressController.text = office['address'];

    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('Editar Oficina'),
            content: _buildOfficeForm(),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () => _saveOffice(officeId: office.id),
                child: const Text('Guardar'),
              ),
            ],
          ),
    );
  }

  Widget _buildOfficeForm() {
    return Form(
      key: _formKey,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextFormField(
            controller: _nameController,
            decoration: const InputDecoration(
              labelText: 'Nombre de la Oficina',
            ),
            validator: (value) => value!.isEmpty ? 'Requerido' : null,
          ),
          TextFormField(
            controller: _addressController,
            decoration: const InputDecoration(labelText: 'Dirección'),
            validator: (value) => value!.isEmpty ? 'Requerido' : null,
          ),
        ],
      ),
    );
  }

  Future<void> _saveOffice({String? officeId}) async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);
    try {
      final officeData = {
        'name': _nameController.text.trim(),
        'address': _addressController.text.trim(),
        'updatedAt': FieldValue.serverTimestamp(),
      };

      if (officeId == null) {
        // Nueva oficina
        officeData['createdAt'] = FieldValue.serverTimestamp();
        await _firestore.collection('offices').add(officeData);
      } else {
        // Editar oficina existente
        await _firestore.collection('offices').doc(officeId).update(officeData);
      }

      if (mounted) Navigator.pop(context);
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    super.dispose();
  }
}


          //TODO AP/cobros_app/lib/screens/admin/users_screen.dart

// screens/admin/users_screen.dart
import 'package:flutter/material.dart';
import '../../../services/user_service.dart';
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Para Timestamp

class UsersScreen extends StatefulWidget {
  const UsersScreen({super.key});

  @override
  _UsersScreenState createState() => _UsersScreenState();
}

class _UsersScreenState extends State<UsersScreen> {
  final UserService _userService = UserService();
  List<Map<String, dynamic>> _users = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadUsers();
  }

  Future<void> _loadUsers() async {
    setState(() => _isLoading = true);
    try {
      final users = await _userService.getAllUsers();
      setState(() => _users = users);
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: ${e.toString()}')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Gestión de Usuarios'),
        actions: [
          IconButton(icon: const Icon(Icons.refresh), onPressed: _loadUsers),
        ],
      ),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : ListView.builder(
                itemCount: _users.length,
                itemBuilder: (context, index) {
                  final user = _users[index];
                  return Card(
                    margin: const EdgeInsets.all(8),
                    child: ListTile(
                      title: Text(user['email'] ?? 'Sin email'),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('UID: ${user['uid']}'),
                          if (user['createdAt'] != null)
                            Text(
                              'Registrado: ${_formatDate(user['createdAt'])}',
                            ),
                          Text(
                            user['isAdmin']
                                ? 'ROL: ADMINISTRADOR'
                                : 'ROL: USUARIO',
                            style: TextStyle(
                              color:
                                  user['isAdmin'] ? Colors.green : Colors.blue,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      trailing: Switch(
                        value: user['isAdmin'],
                        onChanged: (value) => _toggleAdminStatus(user, value),
                      ),
                    ),
                  );
                },
              ),
    );
  }

  String _formatDate(dynamic date) {
    if (date is Timestamp) {
      return DateFormat('dd/MM/yyyy HH:mm').format(date.toDate());
    }
    return date.toString();
  }

  Future<void> _toggleAdminStatus(
    Map<String, dynamic> user,
    bool makeAdmin,
  ) async {
    try {
      if (makeAdmin) {
        await _userService.promoteToAdmin(user['uid'], user['email']);
      } else {
        await _userService.demoteAdmin(user['uid']);
      }
      _loadUsers(); // Refrescar lista
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: ${e.toString()}')));
    }
  }
}


     //TODO collector

          //TODO AP/cobros_app/lib/screens/collector/collector_home_screen.dart

          import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import '../../services/auth_service.dart';

class CollectorHomeScreen extends StatefulWidget {
  const CollectorHomeScreen({super.key});

  @override
  State<CollectorHomeScreen> createState() => _CollectorHomeScreenState();
}

class _CollectorHomeScreenState extends State<CollectorHomeScreen> {
  final AuthService _authService = AuthService();
  String? _officeId;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadOfficeData();
  }

  Future<void> _loadOfficeData() async {
    final userData = await _authService.getCurrentUserData();
    setState(() {
      _officeId = userData?['officeId'];
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Mis Cobros'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadOfficeData,
          ),
        ],
      ),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : _officeId == null
              ? const Center(child: Text('No estás asignado a una oficina'))
              : _buildCollectorContent(),
    );
  }

  Widget _buildCollectorContent() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  const Text(
                    'Resumen del Día',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  StreamBuilder<QuerySnapshot>(
                    stream:
                        FirebaseFirestore.instance
                            .collection('payments')
                            .where('officeId', isEqualTo: _officeId)
                            .where(
                              'collectorId',
                              isEqualTo: _authService.currentUser?.uid,
                            )
                            .where(
                              'date',
                              isEqualTo: DateFormat(
                                'yyyy-MM-dd',
                              ).format(DateTime.now()),
                            )
                            .snapshots(),
                    builder: (context, snapshot) {
                      if (!snapshot.hasData) {
                        return const CircularProgressIndicator();
                      }

                      final total = snapshot.data!.docs.fold<double>(
                        0,
                        (sum, doc) => sum + (doc['amount'] as num).toDouble(),
                      );

                      return Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          _buildSummaryItem(
                            'Cobros',
                            snapshot.data!.docs.length.toString(),
                          ),
                          _buildSummaryItem(
                            'Total',
                            '\$${total.toStringAsFixed(2)}',
                          ),
                        ],
                      );
                    },
                  ),
                ],
              ),
            ),
          ),
        ),
        Expanded(
          child: ListView(
            children: [
              const Padding(
                padding: EdgeInsets.all(16.0),
                child: Text(
                  'Últimos Cobros',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ),
              _buildRecentPayments(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSummaryItem(String label, String value) {
    return Column(
      children: [
        Text(label, style: const TextStyle(fontSize: 14, color: Colors.grey)),
        Text(
          value,
          style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ],
    );
  }

  Widget _buildRecentPayments() {
    return StreamBuilder<QuerySnapshot>(
      stream:
          FirebaseFirestore.instance
              .collection('payments')
              .where('officeId', isEqualTo: _officeId)
              .where('collectorId', isEqualTo: _authService.currentUser?.uid)
              .orderBy('date', descending: true)
              .limit(10)
              .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return const Center(child: Text('No hay cobros registrados'));
        }

        return ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            final payment = snapshot.data!.docs[index];
            return Card(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
              child: ListTile(
                title: Text(payment['clientName']),
                subtitle: Text(
                  DateFormat('dd/MM/yyyy').format(payment['date'].toDate()),
                ),
                trailing: Text(
                  '\$${payment['amount'].toStringAsFixed(2)}',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
            );
          },
        );
      },
    );
  }
}


    //TODO owner
          //TODO AP/cobros_app/lib/screens/owner/owner_home_screen.dart

          import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import '../../../services/auth_service.dart';
import '../../../services/user_service.dart';
import 'package:firebase_auth/firebase_auth.dart';

class OwnerHomeScreen extends StatefulWidget {
  const OwnerHomeScreen({super.key});

  @override
  State<OwnerHomeScreen> createState() => _OwnerHomeScreenState();
}

class _OwnerHomeScreenState extends State<OwnerHomeScreen> {
  final AuthService _authService = AuthService();
  final UserService _userService = UserService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();

  String? _officeId;
  bool _isLoading = false;
  List<Map<String, dynamic>> _collectors = [];

  @override
  void initState() {
    super.initState();
    _loadOfficeData();
    _loadCollectors();
  }

  Future<void> _loadOfficeData() async {
    final userData = await _userService.getCurrentUserData();
    setState(() {
      _officeId = userData?['officeId'];
    });
  }

  Future<void> _loadCollectors() async {
    if (_officeId == null) return;

    setState(() => _isLoading = true);
    try {
      final querySnapshot =
          await _firestore
              .collection('users')
              .where('officeId', isEqualTo: _officeId)
              .where('role', isEqualTo: 'collector')
              .get();

      setState(() {
        _collectors =
            querySnapshot.docs.map((doc) {
              return {'id': doc.id, ...doc.data()};
            }).toList();
      });
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _registerCollector() async {
    if (!_formKey.currentState!.validate() || _officeId == null) return;

    setState(() => _isLoading = true);
    try {
      // 1. Crear usuario en Authentication
      final userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(
            email: _emailController.text.trim(),
            password: _passwordController.text.trim(),
          );

      // 2. Guardar datos extendidos en Firestore
      await _firestore.collection('users').doc(userCredential.user?.uid).set({
        'email': _emailController.text.trim(),
        'name': _nameController.text.trim(),
        'role': 'collector',
        'officeId': _officeId,
        'createdBy': FirebaseAuth.instance.currentUser?.uid,
        'createdAt': FieldValue.serverTimestamp(),
        'isActive': true,
      });

      // 3. Actualizar lista
      await _loadCollectors();

      // 4. Mostrar feedback y limpiar formulario
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Cobrador registrado exitosamente')),
        );
        _formKey.currentState?.reset();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error: ${e.toString()}')));
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  Future<void> _toggleCollectorStatus(String userId, bool isActive) async {
    try {
      await _firestore.collection('users').doc(userId).update({
        'isActive': isActive,
        'updatedAt': FieldValue.serverTimestamp(),
      });
      await _loadCollectors();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error actualizando estado: ${e.toString()}')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Mi Oficina')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Registrar Nuevo Cobrador',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    controller: _nameController,
                    decoration: const InputDecoration(
                      labelText: 'Nombre Completo',
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Ingrese el nombre del cobrador';
                      }
                      return null;
                    },
                  ),
                  TextFormField(
                    controller: _emailController,
                    decoration: const InputDecoration(labelText: 'Email'),
                    validator: (value) {
                      if (value == null ||
                          value.isEmpty ||
                          !value.contains('@')) {
                        return 'Ingrese un email válido';
                      }
                      return null;
                    },
                  ),
                  TextFormField(
                    controller: _passwordController,
                    decoration: const InputDecoration(labelText: 'Contraseña'),
                    obscureText: true,
                    validator: (value) {
                      if (value == null || value.length < 6) {
                        return 'Mínimo 6 caracteres';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _isLoading ? null : _registerCollector,
                    child:
                        _isLoading
                            ? const CircularProgressIndicator()
                            : const Text('Registrar Cobrador'),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 40),
            const Text(
              'Cobradores Registrados',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            Expanded(
              child:
                  _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : _collectors.isEmpty
                      ? const Center(
                        child: Text('No hay cobradores registrados'),
                      )
                      : ListView.builder(
                        itemCount: _collectors.length,
                        itemBuilder: (context, index) {
                          final collector = _collectors[index];
                          return Card(
                            margin: const EdgeInsets.symmetric(vertical: 4),
                            child: ListTile(
                              title: Text(collector['name'] ?? 'Sin nombre'),
                              subtitle: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(collector['email'] ?? 'Sin email'),
                                  Text(
                                    'Registrado: ${_formatDate(collector['createdAt'])}',
                                    style: const TextStyle(fontSize: 12),
                                  ),
                                ],
                              ),
                              trailing: Switch(
                                value: collector['isActive'] ?? false,
                                onChanged:
                                    (value) => _toggleCollectorStatus(
                                      collector['id'],
                                      value,
                                    ),
                              ),
                            ),
                          );
                        },
                      ),
            ),
          ],
        ),
      ),
    );
  }

  String _formatDate(dynamic date) {
    if (date == null) return 'Fecha desconocida';
    if (date is Timestamp) {
      return DateFormat('dd/MM/yyyy').format(date.toDate());
    }
    return date.toString();
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }
}


         //TODO AP/cobros_app/lib/screens/owner/register_collector_screen.dart

         import 'package:flutter/material.dart';
import '../../services/auth_service.dart';

class RegisterCollectorScreen extends StatefulWidget {
  final String officeId;

  const RegisterCollectorScreen({super.key, required this.officeId});

  @override
  State<RegisterCollectorScreen> createState() =>
      _RegisterCollectorScreenState();
}

class _RegisterCollectorScreenState extends State<RegisterCollectorScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Registrar Nuevo Cobrador')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Nombre Completo'),
                validator: (value) => value!.isEmpty ? 'Requerido' : null,
              ),
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                validator:
                    (value) => value!.contains('@') ? null : 'Email inválido',
              ),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'Contraseña'),
                obscureText: true,
                validator:
                    (value) =>
                        value!.length >= 6 ? null : 'Mínimo 6 caracteres',
              ),
              const SizedBox(height: 20),
              _isLoading
                  ? const CircularProgressIndicator()
                  : ElevatedButton(
                    onPressed: _registerCollector,
                    child: const Text('Registrar Cobrador'),
                  ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _registerCollector() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);
    try {
      final authService = AuthService();
      final user = await authService.registerCollector(
        email: _emailController.text.trim(),
        password: _passwordController.text.trim(),
        officeId: widget.officeId,
        displayName: _nameController.text.trim(),
      );

      if (user != null && mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Cobrador registrado exitosamente')),
        );
        Navigator.pop(context);
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }
}




  //TODO AP/cobros_app/lib/screens/register_screen.dart

import 'package:flutter/material.dart';
import '../services/auth_service.dart';
import 'main_screen.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key}); // Cambio aquí

  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  final AuthService _authService = AuthService();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Registrarse')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Por favor ingresa tu email';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'Contraseña'),
                obscureText: true,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Por favor ingresa tu contraseña';
                  }
                  if (value.length < 6) {
                    return 'La contraseña debe tener al menos 6 caracteres';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _confirmPasswordController,
                decoration: const InputDecoration(
                  labelText: 'Confirmar Contraseña',
                ),
                obscureText: true,
                validator: (value) {
                  if (value != _passwordController.text) {
                    return 'Las contraseñas no coinciden';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              _isLoading
                  ? const CircularProgressIndicator()
                  : ElevatedButton(
                    onPressed: _register,
                    child: const Text('Registrarse'),
                  ),
            ],
          ),
        ),
      ),
    );
  }

  // En el método _register, cambia MyApp por MainScreen
  Future<void> _register() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);

      final email = _emailController.text.trim();
      final password = _passwordController.text.trim();

      final user = await _authService.register(email, password);

      setState(() => _isLoading = false);

      if (user != null) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => const MainScreen(),
          ), // Cambiado aquí
        );
      } else {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('Error al registrarse')));
      }
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }
}




  //TODO AP/cobros_app/lib/screens/cobros_screen.dart

import 'package:flutter/material.dart';
import '../models/cobro_model.dart';
import '../data/database_helper.dart';
import 'package:intl/intl.dart';
import 'nuevo_cobro_screen.dart';

class CobrosScreen extends StatefulWidget {
  const CobrosScreen({super.key});

  @override
  State<CobrosScreen> createState() => _CobrosScreenState();
}

class _CobrosScreenState extends State<CobrosScreen> {
  List<Cobro> _cobros = [];
  bool _isLoading = true;
  bool _hasError = false;
  String _errorMessage = '';

  @override
  void initState() {
    super.initState();
    _loadCobros();
  }

  Future<void> _loadCobros() async {
    try {
      setState(() {
        _isLoading = true;
        _hasError = false;
      });

      final cobros = await DatabaseHelper.instance.getCobros();

      setState(() {
        _cobros = cobros;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _hasError = true;
        _errorMessage = e.toString();
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error al cargar cobros: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  void _mostrarFormularioCobro(BuildContext context) async {
    final nuevoCobro = await Navigator.push<Cobro>(
      context,
      MaterialPageRoute(
        builder:
            (context) => NuevoCobroScreen(
              onCobroCreado: (cobro) => Navigator.pop(context, cobro),
            ),
      ),
    );

    if (nuevoCobro != null) {
      try {
        setState(() => _isLoading = true);

        final id = await DatabaseHelper.instance.insertCobro(nuevoCobro);

        if (id > 0) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Cobro a ${nuevoCobro.clienteNombre} guardado correctamente',
              ),
              backgroundColor: Colors.green,
            ),
          );
          await _loadCobros();
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error al guardar cobro: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _deleteCobro(int index) async {
    final cobro = _cobros[index];
    final cobroId = cobro.id;

    if (cobroId == null) return;

    try {
      setState(() => _isLoading = true);

      final result = await DatabaseHelper.instance.deleteCobro(cobroId);

      if (result > 0) {
        setState(() {
          _cobros.removeAt(index);
        });

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Cobro eliminado'),
            action: SnackBarAction(
              label: 'Deshacer',
              onPressed: () async {
                try {
                  final newId = await DatabaseHelper.instance.insertCobro(
                    cobro,
                  );
                  if (newId > 0) {
                    setState(() {
                      _cobros.insert(index, cobro.copyWith(id: newId));
                    });
                  }
                } catch (e) {
                  debugPrint('Error al deshacer eliminación: $e');
                }
              },
            ),
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error al eliminar cobro: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Lista de cobros'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadCobros,
            tooltip: 'Recargar',
          ),
        ],
      ),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _mostrarFormularioCobro(context),
        child: const Icon(Icons.add),
      ),
    );
  }

  Widget _buildBody() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_hasError) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error, color: Colors.red, size: 50),
            const SizedBox(height: 20),
            Text(
              'Error al cargar cobros',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            Text(
              _errorMessage,
              textAlign: TextAlign.center,
              style: Theme.of(
                context,
              ).textTheme.bodyMedium?.copyWith(color: Colors.red),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _loadCobros,
              child: const Text('Reintentar'),
            ),
          ],
        ),
      );
    }

    if (_cobros.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.list, size: 50, color: Colors.grey),
            const SizedBox(height: 20),
            Text(
              'No hay cobros registrados',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 10),
            const Text('Presiona el botón + para agregar un nuevo cobro'),
          ],
        ),
      );
    }

    return ListView.builder(
      itemCount: _cobros.length,
      itemBuilder: (context, index) {
        final cobro = _cobros[index];
        return Dismissible(
          key: Key('cobro_${cobro.id}_${cobro.fecha.millisecondsSinceEpoch}'),
          direction: DismissDirection.endToStart,
          background: Container(
            color: Colors.red,
            alignment: Alignment.centerRight,
            padding: const EdgeInsets.only(right: 20),
            child: const Icon(Icons.delete, color: Colors.white),
          ),
          confirmDismiss: (direction) async {
            return await showDialog<bool>(
              context: context,
              builder:
                  (context) => AlertDialog(
                    title: const Text('Confirmar eliminación'),
                    content: Text(
                      '¿Eliminar cobro de ${cobro.clienteNombre} por \$${cobro.monto.toStringAsFixed(2)}?',
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(false),
                        child: const Text('Cancelar'),
                      ),
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(true),
                        child: const Text(
                          'Eliminar',
                          style: TextStyle(color: Colors.red),
                        ),
                      ),
                    ],
                  ),
            );
          },
          onDismissed: (direction) => _deleteCobro(index),
          child: Card(
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            child: ListTile(
              leading: const Icon(Icons.payment, color: Colors.blue),
              title: Text(
                cobro.clienteNombre,
              ), // Cambiado de cliente a clienteNombre
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Fecha: ${DateFormat('dd/MM/yyyy - HH:mm').format(cobro.fecha)}',
                  ),
                  Text('Ubicación: ${cobro.ubicacion}'),
                ],
              ),
              trailing: Text(
                '\$${cobro.monto.toStringAsFixed(2)}',
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              onTap: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Mostrar detalles de ${cobro.clienteNombre}'),
                  ),
                );
              },
            ),
          ),
        );
      },
    );
  }
}




  //TODO AP/cobros_app/lib/screens/clientes_screen.dart

import 'package:flutter/material.dart';
import 'package:intl/intl.dart'; // Importación necesaria para DateFormat
import '../models/cliente_models.dart';
import '../data/database_helper.dart';
import 'nuevo_cliente_screen.dart';

class ClientesScreen extends StatefulWidget {
  const ClientesScreen({super.key});

  @override
  State<ClientesScreen> createState() => _ClientesScreenState();
}

class _ClientesScreenState extends State<ClientesScreen> {
  List<Cliente> _clientes = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadClientes();
  }

  Future<void> _loadClientes() async {
    try {
      final clientes = await DatabaseHelper.instance.getClientes();
      setState(() {
        _clientes = clientes;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error al cargar clientes: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Clientes'),
        actions: [
          IconButton(icon: const Icon(Icons.refresh), onPressed: _loadClientes),
        ],
      ),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : _clientes.isEmpty
              ? const Center(child: Text('No hay clientes registrados'))
              : ListView.builder(
                itemCount: _clientes.length,
                itemBuilder: (context, index) {
                  final cliente = _clientes[index];
                  return Card(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    child: ListTile(
                      title: Text(cliente.nombre),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (cliente.telefono != null)
                            Text('Tel: ${cliente.telefono}'),
                          if (cliente.email != null)
                            Text('Email: ${cliente.email}'),
                          Text(
                            'Registrado: ${DateFormat('dd/MM/yyyy').format(cliente.fechaRegistro)}',
                          ),
                        ],
                      ),
                      trailing: const Icon(Icons.chevron_right),
                      onTap: () {
                        // Navegar a detalles/edición del cliente
                      },
                    ),
                  );
                },
              ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _mostrarFormularioCliente(context),
        child: const Icon(Icons.add),
      ),
    );
  }

  void _mostrarFormularioCliente(BuildContext context) async {
    final nuevoCliente = await Navigator.push<Cliente>(
      context,
      MaterialPageRoute(builder: (context) => const NuevoClienteScreen()),
    );

    if (nuevoCliente != null) {
      // Mostrar snackbar de confirmación
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'Cliente ${nuevoCliente.nombre} guardado correctamente',
          ),
          duration: const Duration(seconds: 2),
        ),
      );

      // Actualizar la lista
      await _loadClientes();

      // Opcional: Mostrar el nuevo cliente en la parte superior
      setState(() {
        _clientes.insert(0, nuevoCliente);
      });
    }
  }
}




  //TODO AP/cobros_app/lib/screens/home_screen.dart

import 'package:flutter/material.dart';
import '../utils/responsive.dart'; // Importamos nuestro helper de responsividad
import 'cobros_screen.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Obtenemos el ancho de pantalla
    final screenWidth = Responsive.screenWidth(context);

    // Definimos tamaños basados en el dispositivo
    final iconSize = Responsive.isMobile(context) ? 80.0 : 120.0;
    final titleFontSize = Responsive.isMobile(context) ? 20.0 : 28.0;
    final paddingValue = Responsive.isMobile(context) ? 20.0 : 40.0;
    final buttonWidth = Responsive.isMobile(context) ? double.infinity : 400.0;
    final verticalSpacing = Responsive.isMobile(context) ? 20.0 : 30.0;

    return Scaffold(
      body: Center(
        child: SingleChildScrollView(
          child: Container(
            // Ancho máximo condicional:
            // - En móvil: ocupa casi todo el ancho (95%)
            // - En tablet/desktop: ancho fijo de 600px
            width: Responsive.isMobile(context) ? screenWidth * 0.95 : 600,
            padding: EdgeInsets.all(paddingValue),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                if (!Responsive.isMobile(
                  context,
                )) // Sombra solo en pantallas grandes
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    spreadRadius: 5,
                  ),
              ],
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // Ícono principal (tamaño responsivo)
                Icon(
                  Icons.home,
                  size: iconSize,
                  color: Theme.of(context).primaryColor,
                ),

                // Espaciado vertical responsivo
                SizedBox(height: verticalSpacing),

                // Título (tamaño de fuente responsivo)
                Text(
                  'Bienvenido a la App de Cobros',
                  style: TextStyle(
                    fontSize: titleFontSize,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                  textAlign: TextAlign.center,
                ),

                // Subtítulo (visible solo en pantallas grandes)
                if (!Responsive.isMobile(context))
                  Padding(
                    padding: const EdgeInsets.only(top: 10),
                    child: Text(
                      'Gestiona tus cobros de forma eficiente',
                      style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                    ),
                  ),

                SizedBox(height: verticalSpacing * 1.5),

                // Botón principal (ancho responsivo)
                SizedBox(
                  width: buttonWidth,
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const CobrosScreen(),
                        ),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 15),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    child: const Text(
                      'Nuevo Cobro',
                      style: TextStyle(fontSize: 18),
                    ),
                  ),
                ),

                // Espacio adicional en pantallas grandes
                if (!Responsive.isMobile(context)) const SizedBox(height: 40),

                // Sección adicional para tablets/desktop
                if (Responsive.isTablet(context) ||
                    Responsive.isDesktop(context))
                  Padding(
                    padding: const EdgeInsets.only(top: 30),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        _buildFeatureItem(
                          context,
                          Icons.show_chart,
                          'Estadísticas',
                        ),
                        _buildFeatureItem(context, Icons.history, 'Historial'),
                        _buildFeatureItem(
                          context,
                          Icons.settings,
                          'Configuración',
                        ),
                      ],
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Widget auxiliar para construir ítems de características (solo visible en tablet/desktop)
  Widget _buildFeatureItem(BuildContext context, IconData icon, String text) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(15),
          decoration: BoxDecoration(
            color: Theme.of(context).primaryColor.withOpacity(0.1),
            shape: BoxShape.circle,
          ),
          child: Icon(icon, size: 30, color: Theme.of(context).primaryColor),
        ),
        const SizedBox(height: 8),
        Text(
          text,
          style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
        ),
      ],
    );
  }
}






  //TODO AP/cobros_app/lib/screens/nuevo_cobro_screen.dart

import 'package:flutter/material.dart';
import '../models/cobro_model.dart';
import '../models/cliente_models.dart';
import '../data/database_helper.dart';
import '../utils/responsive.dart';
import 'nuevo_cliente_screen.dart';

class NuevoCobroScreen extends StatefulWidget {
  final Function(Cobro) onCobroCreado;

  const NuevoCobroScreen({super.key, required this.onCobroCreado});

  @override
  State<NuevoCobroScreen> createState() => _NuevoCobroScreenState();
}

class _NuevoCobroScreenState extends State<NuevoCobroScreen> {
  final _formKey = GlobalKey<FormState>();
  final _montoController = TextEditingController();
  final _ubicacionController = TextEditingController();
  Cliente? _clienteSeleccionado;
  List<Cliente> _clientes = [];
  bool _cargandoClientes = true;

  @override
  void initState() {
    super.initState();
    _cargarClientes();
  }

  Future<void> _cargarClientes() async {
    try {
      final clientes = await DatabaseHelper.instance.getClientes();
      setState(() {
        _clientes = clientes;
        _cargandoClientes = false;
      });
    } catch (e) {
      setState(() => _cargandoClientes = false);
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error al cargar clientes: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool isMobile = Responsive.isMobile(context);
    final double paddingValue = isMobile ? 16.0 : 24.0;

    return Scaffold(
      appBar: AppBar(title: const Text('Nuevo Cobro'), centerTitle: !isMobile),
      body: SafeArea(
        child: Center(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              maxWidth: isMobile ? double.infinity : 600,
            ),
            child: SingleChildScrollView(
              padding: EdgeInsets.all(paddingValue),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    _buildClienteField(),
                    SizedBox(height: isMobile ? 16 : 20),
                    _buildTextField(
                      controller: _montoController,
                      label: 'Monto',
                      icon: Icons.attach_money,
                      keyboardType: TextInputType.number,
                      isMobile: isMobile,
                    ),
                    SizedBox(height: isMobile ? 16 : 20),
                    _buildTextField(
                      controller: _ubicacionController,
                      label: 'Ubicación',
                      icon: Icons.location_on,
                      isMobile: isMobile,
                      hintText: 'Ej: Av. Principal #123, Ciudad',
                    ),
                    SizedBox(height: isMobile ? 24 : 32),
                    _buildSubmitButton(isMobile),
                    if (_clientes.isEmpty && !_cargandoClientes)
                      Padding(
                        padding: const EdgeInsets.only(top: 20),
                        child: TextButton(
                          onPressed: () {
                            // Opción para redirigir a crear cliente
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder:
                                    (context) => const NuevoClienteScreen(),
                              ),
                            ).then((_) => _cargarClientes());
                          },
                          child: const Text(
                            'No hay clientes. ¿Desea crear uno nuevo?',
                            style: TextStyle(color: Colors.blue),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildClienteField() {
    return DropdownButtonFormField<Cliente>(
      value: _clienteSeleccionado,
      decoration: InputDecoration(
        labelText: 'Cliente',
        prefixIcon: const Icon(Icons.person),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        contentPadding: const EdgeInsets.symmetric(
          vertical: 12,
          horizontal: 16,
        ),
      ),
      items:
          _clientes.map((cliente) {
            return DropdownMenuItem<Cliente>(
              value: cliente,
              child: Text(cliente.nombre, overflow: TextOverflow.ellipsis),
            );
          }).toList(),
      onChanged: (cliente) => setState(() => _clienteSeleccionado = cliente),
      validator: (value) {
        if (value == null) return 'Seleccione un cliente';
        return null;
      },
      isExpanded: true,
      hint:
          _cargandoClientes
              ? const Text('Cargando clientes...')
              : const Text('Seleccione un cliente'),
      disabledHint: const Text('No hay clientes disponibles'),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    required bool isMobile,
    TextInputType? keyboardType,
    String? hintText,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        hintText: hintText,
        prefixIcon: Icon(icon),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        contentPadding: EdgeInsets.symmetric(
          vertical: isMobile ? 12 : 16,
          horizontal: 16,
        ),
      ),
      keyboardType: keyboardType,
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Por favor ingrese $label';
        }
        if (label == 'Monto' && double.tryParse(value) == null) {
          return 'Ingrese un número válido';
        }
        return null;
      },
    );
  }

  Widget _buildSubmitButton(bool isMobile) {
    return ElevatedButton(
      onPressed: _guardarCobro,
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.symmetric(vertical: isMobile ? 14 : 18),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
      child: Text(
        'GUARDAR COBRO',
        style: TextStyle(
          fontSize: isMobile ? 16 : 18,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  void _guardarCobro() {
    if (_formKey.currentState!.validate() && _clienteSeleccionado != null) {
      final nuevoCobro = Cobro(
        clienteId: _clienteSeleccionado!.id!,
        clienteNombre: _clienteSeleccionado!.nombre,
        monto: double.parse(_montoController.text),
        fecha: DateTime.now(),
        ubicacion: _ubicacionController.text,
      );
      widget.onCobroCreado(nuevoCobro);
    } else if (_clienteSeleccionado == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Seleccione un cliente')));
    }
  }

  @override
  void dispose() {
    _montoController.dispose();
    _ubicacionController.dispose();
    super.dispose();
  }
}





    //TODO AP/cobros_app/lib/screens/login_screen.dart

import 'package:flutter/material.dart';
import '../services/auth_service.dart';
import '../screens/register_screen.dart';
import 'main_screen.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final AuthService _authService = AuthService();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Iniciar Sesión')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              children: [
                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(
                    labelText: 'Email',
                    prefixIcon: Icon(Icons.email),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Por favor ingresa tu email';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _passwordController,
                  decoration: const InputDecoration(
                    labelText: 'Contraseña',
                    prefixIcon: Icon(Icons.lock),
                  ),
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Por favor ingresa tu contraseña';
                    }
                    if (value.length < 6) {
                      return 'La contraseña debe tener al menos 6 caracteres';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 24),
                _isLoading
                    ? const CircularProgressIndicator()
                    : SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _login,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        child: const Text('Iniciar Sesión'),
                      ),
                    ),
                const SizedBox(height: 16),
                TextButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const RegisterScreen(),
                      ),
                    );
                  },
                  child: const Text('¿No tienes cuenta? Regístrate aquí'),
                ),
                const SizedBox(height: 24),
                const Divider(),
                const SizedBox(height: 16),
                SizedBox(
                  width: double.infinity,
                  child: OutlinedButton.icon(
                    onPressed: _signInWithGoogle,
                    icon: Image.asset(
                      'assets/images/google_logo.png',
                      height: 24,
                      width: 24,
                    ),
                    label: const Text('Iniciar sesión con Google'),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      side: const BorderSide(color: Colors.grey),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _login() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      try {
        final user = await _authService.signInWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );

        if (user != null && mounted) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const MainScreen()),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text(e.toString())));
        }
      } finally {
        if (mounted) setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _signInWithGoogle() async {
    setState(() => _isLoading = true);
    try {
      final user = await _authService.signInWithGoogle();
      if (user != null && mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const MainScreen()),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error con Google: ${e.toString()}')),
        );
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
}





    //TODO AP/cobros_app/lib/screens/main_screen.dart

import 'package:flutter/material.dart';
import '../services/auth_service.dart';
import '../services/user_service.dart';
import 'home_screen.dart';
import 'cobros_screen.dart';
import 'clientes_screen.dart';
import 'admin/admin_home_screen.dart'; // Importación corregida
import '../utils/responsive.dart';
import 'owner/owner_home_screen.dart';
import 'collector/collector_home_screen.dart';

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedIndex = 0;
  final UserService _userService = UserService();
  final AuthService _authService = AuthService();
  Map<String, dynamic>? _currentUserData;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    final userData = await _userService.getCurrentUserData();
    setState(() {
      _currentUserData = userData;
      _isLoading = false;
    });
  }

  List<Widget> _getScreensBasedOnRole() {
    if (_isLoading) return [const Center(child: CircularProgressIndicator())];

    switch (_currentUserData?['role']) {
      case 'admin':
        return [
          const AdminHomeScreen(), // Ahora debería reconocer la clase
          const CobrosScreen(),
          const ClientesScreen(),
        ];
      case 'owner':
        return [
          const OwnerHomeScreen(),
          const CobrosScreen(),
          const ClientesScreen(),
        ];
      case 'collector':
        return [
          const CollectorHomeScreen(),
          const CobrosScreen(),
          const SizedBox(),
        ];
      default:
        return [const HomeScreen()];
    }
  }

  List<Widget> _getMenuItems(BuildContext context) {
    if (_isLoading) return [const SizedBox()];

    final menuItems = <Widget>[
      ListTile(
        leading: const Icon(Icons.home),
        title: const Text('Inicio'),
        selected: _selectedIndex == 0,
        selectedTileColor: Colors.blue[100],
        onTap: () => _updateIndex(0, context),
      ),
    ];

    if (_currentUserData?['role'] == 'admin') {
      menuItems.addAll([
        ListTile(
          leading: const Icon(Icons.supervised_user_circle),
          title: const Text('Usuarios'),
          selected: _selectedIndex == 1,
          selectedTileColor: Colors.blue[100],
          onTap: () => _updateIndex(1, context),
        ),
        ListTile(
          leading: const Icon(Icons.business),
          title: const Text('Oficinas'),
          selected: _selectedIndex == 2,
          selectedTileColor: Colors.blue[100],
          onTap: () => _updateIndex(2, context),
        ),
      ]);
    } else if (_currentUserData?['role'] == 'owner') {
      menuItems.add(
        ListTile(
          leading: const Icon(Icons.group_add),
          title: const Text('Registrar Cobradores'),
          selected: _selectedIndex == 1,
          selectedTileColor: Colors.blue[100],
          onTap: () => _updateIndex(1, context),
        ),
      );
    }

    menuItems.addAll([
      ListTile(
        leading: const Icon(Icons.payment),
        title: const Text('Cobros'),
        selected: _selectedIndex == 3,
        selectedTileColor: Colors.blue[100],
        onTap: () => _updateIndex(3, context),
      ),
      const Divider(),
      ListTile(
        leading: const Icon(Icons.logout),
        title: const Text('Cerrar Sesión'),
        onTap: () async {
          await _authService.signOut();
          if (Responsive.isMobile(context)) Navigator.pop(context);
        },
      ),
    ]);

    return menuItems;
  }

  void _updateIndex(int index, BuildContext context) {
    setState(() => _selectedIndex = index);
    if (Responsive.isMobile(context)) Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final bool isMobile = Responsive.isMobile(context);
    final screens = _getScreensBasedOnRole();

    return Scaffold(
      appBar: AppBar(
        title: _buildAppBarTitle(),
        toolbarHeight: isMobile ? 56 : 64,
        backgroundColor: Theme.of(context).primaryColor,
        automaticallyImplyLeading: isMobile,
        actions: _buildAppBarActions(),
      ),
      drawer: isMobile ? _buildDrawer(context) : null,
      body: Row(
        children: [
          if (!isMobile) _buildDesktopMenu(context),
          Expanded(child: screens[_selectedIndex]),
        ],
      ),
    );
  }

  Widget _buildAppBarTitle() {
    if (_isLoading) return const Text('Cargando...');

    String roleName;
    switch (_currentUserData?['role']) {
      case 'admin':
        roleName = 'Administrador';
        break;
      case 'owner':
        roleName = 'Dueño de Oficina';
        break;
      case 'collector':
        roleName = 'Cobrador';
        break;
      default:
        roleName = 'Usuario';
    }

    return Text('CLIQ - $roleName');
  }

  List<Widget> _buildAppBarActions() {
    return [
      if (!_isLoading && _currentUserData != null)
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Center(
            child: Text(
              _currentUserData?['email'] ?? '',
              style: const TextStyle(fontSize: 14),
            ),
          ),
        ),
      IconButton(icon: const Icon(Icons.refresh), onPressed: _loadUserData),
    ];
  }

  Widget _buildDrawer(BuildContext context) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: _getMenuItems(context),
      ),
    );
  }

  Widget _buildDesktopMenu(BuildContext context) {
    return Container(
      width: 250,
      color: Colors.blue[50],
      child: Column(
        children: [
          Container(
            height: 150,
            color: Colors.blue,
            padding: const EdgeInsets.all(16),
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundImage:
                        _currentUserData?['photoUrl'] != null
                            ? NetworkImage(_currentUserData!['photoUrl'])
                            : null,
                    child:
                        _currentUserData?['photoUrl'] == null
                            ? const Icon(Icons.person, size: 30)
                            : null,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _currentUserData?['displayName'] ?? 'Usuario',
                    style: const TextStyle(color: Colors.white),
                  ),
                ],
              ),
            ),
          ),
          Expanded(child: ListView(children: _getMenuItems(context))),
        ],
      ),
    );
  }
}




  //TODO AP/cobros_app/lib/screens/nuevo_cliente_screen.dart

import 'package:flutter/material.dart';
import '../models/cliente_models.dart';
import '../data/database_helper.dart';

class NuevoClienteScreen extends StatefulWidget {
  const NuevoClienteScreen({super.key});

  @override
  State<NuevoClienteScreen> createState() => _NuevoClienteScreenState();
}

class _NuevoClienteScreenState extends State<NuevoClienteScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nombreController = TextEditingController();
  final _telefonoController = TextEditingController();
  final _emailController = TextEditingController();
  final _direccionController = TextEditingController();

  bool _isLoading = false; // <-- Añade esta línea

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Nuevo Cliente')),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      TextFormField(
                        controller: _nombreController,
                        decoration: const InputDecoration(
                          labelText: 'Nombre completo',
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Por favor ingrese el nombre';
                          }
                          return null;
                        },
                      ),
                      TextFormField(
                        controller: _telefonoController,
                        decoration: const InputDecoration(
                          labelText: 'Teléfono',
                        ),
                        keyboardType: TextInputType.phone,
                      ),
                      TextFormField(
                        controller: _emailController,
                        decoration: const InputDecoration(labelText: 'Email'),
                        keyboardType: TextInputType.emailAddress,
                      ),
                      TextFormField(
                        controller: _direccionController,
                        decoration: const InputDecoration(
                          labelText: 'Dirección',
                        ),
                        maxLines: 2,
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: _guardarCliente,
                        child: const Text('Guardar Cliente'),
                      ),
                    ],
                  ),
                ),
              ),
    );
  }

  void _guardarCliente() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true); // Activar loading

      final nuevoCliente = Cliente(
        nombre: _nombreController.text,
        telefono:
            _telefonoController.text.isNotEmpty
                ? _telefonoController.text
                : null,
        email: _emailController.text.isNotEmpty ? _emailController.text : null,
        direccion:
            _direccionController.text.isNotEmpty
                ? _direccionController.text
                : null,
      );

      try {
        final id = await DatabaseHelper.instance.insertCliente(nuevoCliente);
        final clienteGuardado = nuevoCliente.copyWith(id: id);

        if (mounted) {
          Navigator.pop(context, clienteGuardado);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error al guardar cliente: $e')),
          );
        }
      } finally {
        if (mounted) {
          setState(() => _isLoading = false); // Desactivar loading
        }
      }
    }
  }

  @override
  void dispose() {
    _nombreController.dispose();
    _telefonoController.dispose();
    _emailController.dispose();
    _direccionController.dispose();
    super.dispose();
  }
}




//TODO Models:
    //TODO AP/cobros_app/lib/Models/user_model.dart

class AppUser {
  final String id;
  final String email;
  final String
  password; // En producción, NUNCA almacenes contraseñas en texto plano

  AppUser({required this.id, required this.email, required this.password});

  factory AppUser.fromFirestore(Map<String, dynamic> data, String id) {
    return AppUser(
      id: id,
      email: data['email'],
      password: data['password'], // Solo para ejemplo educativo
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'email': email,
      'password':
          password, // En una app real, usa Firebase Auth y no almacenes contraseñas
      'createdAt': DateTime.now().toIso8601String(),
    };
  }
}




    //TODO AP/cobros_app/lib/Models/cobro_model.dart

import 'package:intl/intl.dart'; // Para formatear fechas

class Cobro {
  final int? id;
  final int clienteId; // ID del cliente asociado
  final String
  clienteNombre; // Nombre del cliente (para mostrar sin hacer join)
  final double monto;
  final DateTime fecha;
  final String ubicacion;
  final String? estado;

  Cobro({
    this.id,
    required this.clienteId,
    required this.clienteNombre,
    required this.monto,
    required this.fecha,
    required this.ubicacion,
    this.estado = 'pendiente', // Valor por defecto
  });

  // Constructor para crear un Cobro desde un mapa (usado al leer de la base de datos)
  factory Cobro.fromMap(Map<String, dynamic> map) {
    return Cobro(
      id: map['id'],
      clienteId: map['clienteId'],
      clienteNombre: map['cliente'] ?? 'Cliente desconocido',
      monto: (map['monto'] as num).toDouble(),
      fecha: DateTime.parse(map['fecha']),
      ubicacion: map['ubicacion'],
      estado: map['estado'],
    );
  }

  // Convertir Cobro a mapa (para guardar en base de datos)
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'clienteId': clienteId,
      'cliente': clienteNombre,
      'monto': monto,
      'fecha': fecha.toIso8601String(),
      'ubicacion': ubicacion,
      'estado': estado,
    };
  }

  // Método para crear una copia del cobro con algunos campos modificados
  Cobro copyWith({
    int? id,
    int? clienteId,
    String? clienteNombre,
    double? monto,
    DateTime? fecha,
    String? ubicacion,
    String? estado,
  }) {
    return Cobro(
      id: id ?? this.id,
      clienteId: clienteId ?? this.clienteId,
      clienteNombre: clienteNombre ?? this.clienteNombre,
      monto: monto ?? this.monto,
      fecha: fecha ?? this.fecha,
      ubicacion: ubicacion ?? this.ubicacion,
      estado: estado ?? this.estado,
    );
  }

  // Método para formatear la fecha como string
  String get fechaFormateada {
    return DateFormat('dd/MM/yyyy - HH:mm').format(fecha);
  }

  // Método para formatear el monto como string
  String get montoFormateado {
    return '\$${monto.toStringAsFixed(2)}';
  }

  // Sobreescribir toString para debugging
  @override
  String toString() {
    return 'Cobro{id: $id, clienteId: $clienteId, clienteNombre: $clienteNombre, monto: $monto, fecha: $fecha, ubicacion: $ubicacion, estado: $estado}';
  }

  // Sobreescribir equals y hashCode para comparaciones
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Cobro &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          clienteId == other.clienteId &&
          clienteNombre == other.clienteNombre &&
          monto == other.monto &&
          fecha == other.fecha &&
          ubicacion == other.ubicacion &&
          estado == other.estado;

  @override
  int get hashCode =>
      id.hashCode ^
      clienteId.hashCode ^
      clienteNombre.hashCode ^
      monto.hashCode ^
      fecha.hashCode ^
      ubicacion.hashCode ^
      estado.hashCode;
}


  //TODO AP/cobros_app/lib/models/cliente_models.dart

  class Cliente {
  final int? id;
  final String nombre;
  final String? telefono;
  final String? email;
  final String? direccion;
  final DateTime fechaRegistro;

  Cliente({
    this.id,
    required this.nombre,
    this.telefono,
    this.email,
    this.direccion,
    DateTime? fechaRegistro,
  }) : fechaRegistro = fechaRegistro ?? DateTime.now();

  Cliente copyWith({
    int? id,
    String? nombre,
    String? telefono,
    String? email,
    String? direccion,
    DateTime? fechaRegistro,
  }) {
    return Cliente(
      id: id ?? this.id,
      nombre: nombre ?? this.nombre,
      telefono: telefono ?? this.telefono,
      email: email ?? this.email,
      direccion: direccion ?? this.direccion,
      fechaRegistro: fechaRegistro ?? this.fechaRegistro,
    );
  }

  factory Cliente.fromMap(Map<String, dynamic> map) {
    return Cliente(
      id: map['id'],
      nombre: map['nombre'],
      telefono: map['telefono'],
      email: map['email'],
      direccion: map['direccion'],
      fechaRegistro: DateTime.parse(map['fechaRegistro']),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'nombre': nombre,
      'telefono': telefono,
      'email': email,
      'direccion': direccion,
      'fechaRegistro': fechaRegistro.toIso8601String(),
    };
  }
}




//TODO FIRESTOR reglas

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // REGLAS PARA USUARIOS
    match /users/{userId} {
      allow read: if isAdmin() || isOwnerOfUser(userId) || isUserHimself(userId);
      allow create: if isAdmin() || isOwnerCreatingCollector();
      allow update, delete: if isAdmin() || isOwnerUpdatingCollector(userId);
    }
    
    // REGLAS PARA ADMINS
    match /admins/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    // REGLAS PARA OFICINAS
    match /offices/{officeId} {
      allow read: if isAdmin() || isOwnerOfOffice(officeId);
      allow write: if isAdmin();
    }
    
    // REGLAS PARA PAGOS
    match /payments/{paymentId} {
      allow read: if isAdmin() || isOwnerOfPaymentOffice(paymentId) || isCollectorOwner(paymentId);
      allow create: if isAdmin() || isOwner() || isCollectorCreatingForHisOffice();
      allow update: if isAdmin() || isOwnerOfPaymentOffice(paymentId);
      allow delete: if isAdmin();
    }

    // ========= FUNCIONES DE AYUDA =========

    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isSuperAdmin() {
      return isAdmin() &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isOwner() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    function isCollector() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'collector';
    }

    function isUserHimself(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isOwnerOfUser(targetUserId) {
      return isOwner() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.officeId ==
             get(/databases/$(database)/documents/users/$(targetUserId)).data.officeId;
    }

    function isOwnerCreatingCollector() {
      return isOwner() &&
             request.resource.data.role == 'collector' &&
             request.resource.data.officeId ==
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.officeId;
    }

    function isOwnerUpdatingCollector(targetUserId) {
      return isOwner() &&
             get(/databases/$(database)/documents/users/$(targetUserId)).data.role == 'collector' &&
             isOwnerOfUser(targetUserId);
    }

    function isOwnerOfOffice(officeId) {
      return isOwner() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.officeId == officeId;
    }

    function isOwnerOfPaymentOffice(paymentId) {
      return isOwner() &&
             get(/databases/$(database)/documents/payments/$(paymentId)).data.officeId ==
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.officeId;
    }

    function isCollectorOwner(paymentId) {
      return isCollector() &&
             get(/databases/$(database)/documents/payments/$(paymentId)).data.collectorId == request.auth.uid;
    }

    function isCollectorCreatingForHisOffice() {
      return isCollector() &&
             request.resource.data.officeId ==
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.officeId &&
             request.resource.data.collectorId == request.auth.uid;
    }
  }
}